#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'
    
    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

logic:
    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'windfreak'
            data_scanner: 'lockin'
        options:
            default_scan_mode: 'EQUIDISTANT_SWEEP'

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            pulsegenerator: 'pulseblaster'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
            #additional_extraction_path:
            #additional_analysis_path:
        connect:
            fastcounter: 'lockin2'
            microwave: 'windfreak'
            pulsegenerator: 'pulseblaster'

hardware:
    lockin:
        module.Class: "lock_in.lock_in_SR830.SR830"
        options:
            visa_address: 'GPIB0::1::INSTR'
            comm_timeout: 5000  # in milliseconds
    lockin2:
        module.Class: "lock_in.piglet.SR830"
        options:
            visa_address: 'GPIB0::1::INSTR'
            comm_timeout: 5000  # in milliseconds

    windfreak:
        module.Class: 'microwave.mw_source_windfreak_synthhdpro.MicrowaveSynthHDPro'
        options:
            serial_port: 'COM3'
            comm_timeout: 10  # in seconds
            output_channel: 0  # either 0 or 1, correspond to A or B

    pulseblaster:
        module.Class: 'spincore.pulse_blaster_esrpro.PulseBlasterESRPRO'
        options:
            clock_frequency: 100e6 # in Hz 100e6 is base
            min_instr_len: 6    # number of clock cycles for minimal instruction
            debug_mode: False # optional, to set the debug mode on or off.
            use_smart_pulse_creation: True # optinal, default is false, try to
                                            # optimize the memory used on the device.
            # library_file: 'spinapi64.dll'  # optional, name of the library file
                                            # or  whole path to the file